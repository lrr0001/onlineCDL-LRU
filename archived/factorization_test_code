import sherman_morrison_python_functions
import numpy as np
idmat = np.zeros((4,5,1,1,3,3))
for inds in sherman_morrison_python_functions.loop_magic((4,5,1,1)):
    idmat[inds] = np.identity(3)




D = np.ones((4,5,1,1,5,3),dtype=np.cdouble)/2.
Q = sherman_morrison_python_functions.factoredMatrix_chol(D)

u = np.ones((4,5,1,1,5),dtype=np.cdouble)
v = np.ones((4,5,1,1,3),dtype=np.cdouble)
v[:] = np.array([1,-1,1]).reshape((1,1,1,1,3))

print(np.matmul(Q.L,np.conj(np.swapaxes(Q.L,4,5)))[0,0])

print((idmat + np.matmul(np.conj(np.swapaxes(D,4,5)),D))[0,0])

Q.update(u,v,D)

D_new = D + u.reshape(u.shape + (1,))*np.conj(v.reshape((4,5,1,1,1,3)))

prodOfFactors = np.matmul(Q.L,np.conj(np.swapaxes(Q.L,4,5)))
print(prodOfFactors[0,0])

print((idmat + np.matmul(np.conj(np.swapaxes(D_new,4,5)),D_new))[0,0])


u = np.ones((4,5,1,1,5),dtype=np.cdouble)
u[:] = np.array([1.0j + 0.5,-1.0j + 0.5,2.0j,-2.0j,0.]).reshape((1,1,1,1,5))
v = np.ones((4,5,1,1,3),dtype=np.cdouble)
v[:] = np.array([-1.,-1.,1.0j]).reshape((1,1,1,1,3))
D_old = np.copy(D_new)
D_new = D_old + u.reshape(u.shape + (1,))*np.conj(v.reshape((4,5,1,1,1,3)))

print((idmat + np.matmul(np.conj(np.swapaxes(D_new,4,5)),D_new))[0,0])

Q.update(u,v,D_old)

prodOfFactors = np.matmul(Q.L,np.conj(np.swapaxes(Q.L,4,5)))
print(prodOfFactors[0,0])

x = np.zeros((4,5,1,1,3),dtype=np.cdouble)
x = np.array([1.0,1.0j,1.0 + 1.0j]).reshape((1,1,1,1,3))

print((prodOfFactors + x.reshape(x.shape + (1,))*np.conj(np.swapaxes(x.reshape(x.shape + (1,)),4,5)))[0,0])

Q.sym_update(x)
prodOfFactors = np.matmul(Q.L,np.conj(np.swapaxes(Q.L,4,5)))
print(prodOfFactors[0,0])

